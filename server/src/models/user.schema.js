import mongoose from "mongoose";
import AuthRoles from "../utils/authRoles.js";
import bcrypt from "bcryptjs";
import JWT from "jsonwebtoken";
import crypto from "crypto";
import config from "../config/index.js";

const userSchema = mongoose.Schema({
    name: {
        type: String,
        maxLength: [50, "user name should not exceed 50 characters"],
        required: [true, "name is required"]
    },
    email: {
        type: String,
        required: [true, "Email is required"],
        unique: [true, "email already exists"],
        lowercase: true,
        
    },
    password: {
        type: String,
        required: [true, "Password is required"],
        minLength: [8, "Password must be 8 charactes length"],
        select: false
    },
    role: {
        type: String,
        enum: Object.values(AuthRoles),
        default : AuthRoles.USER
    },
    forgotPasswordToken: {
        type: String,
        default: null,
    },
    forgotPasswordExpiry: {
        type: Date,
        default: null
    }
},{timestamps:true})

// Encrypt password before saving
userSchema.pre("save", async function(next){
    if(!this.isModified("password")) return next()
    this.password = await bcrypt.hash(this.password, 10)
    next()
})

userSchema.methods = {
    // compare password
    comparePassword: async function (enteredPassword) {
        return await bcrypt.compare(enteredPassword, this.password)
    },
    // generate JWT Token
    getJWTtoken: async function () {
        return JWT.sign({_id: this_id, role: this.role}, config.JWT_SECRET,{
            expiresIn: config.JWT_EXPIRY
        })
    },
    generateForgotPasswordToken: function (){
        const forgotToken = crypto.randomBytes(20).toString("hex")

        // just to encrypt token generated by crypto
        this.forgotPasswordToken = crypto
        .createHash("sha256")
        .update(forgotToken)
        .digest("hex")

        // time  for token to expire
        this.forgotPasswordExpiry = Date.now() + 20 * 60 * 1000
        
        return forgotToken
    }
}


export default mongoose.model("User", userSchema)